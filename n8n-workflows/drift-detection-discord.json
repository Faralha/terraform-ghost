{
  "name": "Terraform Drift - Discord Notifications",
  "nodes": [
    {
      "parameters": {
        "path": "drift-detected",
        "options": {}
      },
      "id": "discord-webhook-drift",
      "name": "Drift Detected",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "path": "drift-status",
        "options": {}
      },
      "id": "discord-webhook-status",
      "name": "Status Update",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        500
      ]
    },
    {
      "parameters": {
        "path": "drift-error",
        "options": {}
      },
      "id": "discord-webhook-error",
      "name": "Error Alert",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        700
      ]
    },
    {
      "parameters": {
        "jsCode": "// Create Discord embed for drift detection\nconst eventData = $input.first().json;\n\nlet embed;\nlet color;\nlet title;\n\nif (eventData.event === 'drift_detected') {\n  color = 15158332; // Red\n  title = \"üö® Terraform Drift Detected\";\n  embed = {\n    title: title,\n    description: `Configuration drift detected in **terraform-ghost** project`,\n    color: color,\n    fields: [\n      {\n        name: \"üìÖ Timestamp\",\n        value: eventData.timestamp,\n        inline: true\n      },\n      {\n        name: \"üñ•Ô∏è Host\",\n        value: eventData.hostname,\n        inline: true\n      },\n      {\n        name: \"üìä Exit Code\",\n        value: eventData.exit_code.toString(),\n        inline: true\n      },\n      {\n        name: \"üìã Summary\",\n        value: eventData.summary || eventData.message,\n        inline: false\n      },\n      {\n        name: \"‚ö° Action Required\",\n        value: \"Please review and apply terraform changes immediately!\",\n        inline: false\n      }\n    ],\n    footer: {\n      text: \"Terraform Ghost CMS Monitor\"\n    },\n    timestamp: new Date().toISOString()\n  };\n} else if (eventData.event === 'no_drift') {\n  color = 3066993; // Green\n  title = \"‚úÖ Terraform Status: OK\";\n  embed = {\n    title: title,\n    description: `No configuration drift detected in **terraform-ghost**`,\n    color: color,\n    fields: [\n      {\n        name: \"üìÖ Timestamp\",\n        value: eventData.timestamp,\n        inline: true\n      },\n      {\n        name: \"üñ•Ô∏è Host\",\n        value: eventData.hostname,\n        inline: true\n      },\n      {\n        name: \"‚ú® Status\",\n        value: \"All good! Infrastructure matches configuration.\",\n        inline: false\n      }\n    ],\n    footer: {\n      text: \"Terraform Ghost CMS Monitor\"\n    },\n    timestamp: new Date().toISOString()\n  };\n} else {\n  // Error\n  color = 10038562; // Dark red\n  title = \"‚ùå Terraform Error\";\n  embed = {\n    title: title,\n    description: `Error occurred during drift detection in **terraform-ghost**`,\n    color: color,\n    fields: [\n      {\n        name: \"üìÖ Timestamp\",\n        value: eventData.timestamp,\n        inline: true\n      },\n      {\n        name: \"üñ•Ô∏è Host\",\n        value: eventData.hostname,\n        inline: true\n      },\n      {\n        name: \"üî¥ Error\",\n        value: eventData.message,\n        inline: false\n      },\n      {\n        name: \"üîß Details\",\n        value: eventData.error_details || \"Check logs for more information\",\n        inline: false\n      }\n    ],\n    footer: {\n      text: \"Terraform Ghost CMS Monitor\"\n    },\n    timestamp: new Date().toISOString()\n  };\n}\n\nconst discordPayload = {\n  embeds: [embed]\n};\n\nreturn { json: discordPayload };"
      },
      "id": "format-discord-message",
      "name": "Format Discord Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        500
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://discord.com/api/webhooks/YOUR_WEBHOOK_ID/YOUR_WEBHOOK_TOKEN",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyContentType": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "id": "send-discord-webhook",
      "name": "Send Discord Webhook",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        680,
        500
      ]
    },
    {
      "parameters": {
        "operation": "log",
        "message": "=Discord notification sent for event: {{ $('Drift Detected').first().json.event || $('Status Update').first().json.event || $('Error Alert').first().json.event }}"
      },
      "id": "log-notification",
      "name": "Log Notification",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        900,
        500
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Drift Detected": {
      "main": [
        [
          {
            "node": "Format Discord Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Status Update": {
      "main": [
        [
          {
            "node": "Format Discord Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Alert": {
      "main": [
        [
          {
            "node": "Format Discord Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Discord Message": {
      "main": [
        [
          {
            "node": "Send Discord Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Discord Webhook": {
      "main": [
        [
          {
            "node": "Log Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2",
  "id": "2",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "tags": []
}